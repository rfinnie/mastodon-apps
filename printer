#!/usr/bin/env python3

# SPDX-FileComment: Printer Mastodon bot
# SPDX-FileCopyrightText: Copyright (C) 2023 Ryan Finnie
# SPDX-License-Identifier: MPL-2.0

import io
import socket
import sys
import textwrap

from bs4 import BeautifulSoup
import dateutil.parser
from PIL import Image, ImageOps
from unidecode import unidecode

from lib import BaseMastodon


class Printer(BaseMastodon):
    name = "printer"
    calling_file = __file__

    def tobin(self, data):
        if not isinstance(data, (list, tuple)):
            data = [data]
        out = b""
        for part in data:
            if isinstance(part, (bytes, bytearray)):
                out += part
            else:
                out += self.transliterate(part)
        return out

    def transliterate(self, string):
        out = b""
        for char in string:
            try:
                out += char.encode("cp437")
            except UnicodeEncodeError:
                out += unidecode(char, "replace").encode("cp437", "replace")
        return out

    def process_mention(self, mention):
        self.logger.info(
            "Received mention from {} (@{})".format(
                mention["status"]["account"]["display_name"],
                mention["status"]["account"]["acct"],
            )
        )
        self.logger.info("Post: {}".format(mention["status"]["url"]))
        out = []
        out.extend([b"\x1b!\x38", self.server["title"], b"\x1b!\x00\n\n"])
        out.extend(
            [
                "From: ",
                b"\x1b!\x08",
                mention["status"]["account"]["display_name"],
                b"\x1b!\x00",
                " (@{})\n".format(mention["status"]["account"]["acct"]),
            ]
        )
        for other_mention in mention["status"]["mentions"]:
            if other_mention["acct"] == self.me["acct"]:
                continue
            if other_mention["acct"] == mention["status"]["account"]["acct"]:
                continue
            out.extend(
                [
                    "Mentions: ",
                    b"\x1b!\x08",
                    "@" + other_mention["acct"],
                    b"\x1b!\x00",
                ]
            )
            if other_mention["id"] == mention["status"]["in_reply_to_account_id"]:
                out.append(" (reply)")
            out.append("\n")
        out.append(
            "Date: {}\n".format(
                dateutil.parser.parse(mention["status"]["created_at"]).strftime("%c")
            )
        )
        if mention["status"]["spoiler_text"]:
            out.append("Spoiler: " + mention["status"]["spoiler_text"])
        out.append(b"\n")
        lines = []
        content = mention["status"]["content"]
        soup = BeautifulSoup(content.replace("\n", " "), features="lxml")
        for br in soup.find_all("br"):
            br.replace_with("\n")
        for para in soup.find_all("p"):
            para = para.get_text().strip()
            self.logger.debug(repr(para))
            for line in para.split("\n"):
                lines.extend(textwrap.wrap(line, width=48))
            lines.append("")
        lines = lines[:50]
        for line in lines:
            self.logger.debug(repr(line))
            out.append(line + "\n")
            if line.startswith("https://"):
                out.append(self.get_qrcode_bin(line.strip()))

        for attachment in mention["status"]["media_attachments"][:2]:
            if attachment["type"] != "image":
                continue
            r = self.session.get(attachment["url"])
            r.raise_for_status()
            out.append(self.render_image(io.BytesIO(r.content)))
            if attachment["description"]:
                out.append(b"\n")
                for line in textwrap.wrap(
                    "Image description: " + attachment["description"], width=48
                ):
                    out.append(line + "\n")
            out.append(b"\n")

        out.append(b"\x1b@")  # Reset
        out.append(b"\x1dVB\x96")  # Paper cut, 5 lines bottom margin
        out = self.tobin(out)

        if self.config.get("printer_device"):
            with open(self.config["printer_device"], "wb") as f:
                f.write(out)
        else:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect(
                (self.config["printer_host"], self.config.get("printer_port", 9100))
            )
            sock.send(out)
            sock.close()
        self.logger.info("Print sent to printer, {} bytes".format(len(out)))

        if not mention["status"]["in_reply_to_id"]:
            r = self.session.post(
                "{}/api/v1/statuses/{}/favourite".format(
                    self.url_base, mention["status"]["id"]
                )
            )
            r.raise_for_status()
            self.logger.info("Favorited {}".format(mention["status"]["url"]))

    def render_image(self, file):
        im = Image.open(file)
        if im.width > 256 or im.height > 256:
            im.thumbnail((256, 256), Image.LANCZOS)
        bitmap = im.convert("L")  # greyscale
        bitmap = ImageOps.invert(bitmap).convert("1")  # invert + bitmap

        (width, height) = im.size
        width_bytes = (int)((width + 7) / 8)
        header = b"\x1dv0\x03" + bytearray(
            [
                width_bytes % 256,
                width_bytes >> 8,
                height % 256,
                height >> 8,
            ]
        )
        return header + bitmap.tobytes()

    def get_qrcode_bin(self, payload):
        out = (
            b"\x1d(k\x04\x00\x31\x41\x32\x00"  # QR model 2
            + b"\x1d(k\x03\x00\x31\x43\x0a"  # QR size 10 dots
            + b"\x1d(k\x03\x00\x31\x45\x31"  # QR error correction level M (15%)
        )
        a = payload.encode("UTF-8")
        store_len = len(a) + 3
        pl = store_len % 256
        ph = int(store_len / 256)
        out += b"\x1d(k" + bytes([pl, ph]) + b"\x31\x50\x30" + a  # QR store
        out += b"\x1d(k\x03\x00\x31\x51\x30"  # QR print
        return out


if __name__ == "__main__":
    sys.exit(Printer().main())
